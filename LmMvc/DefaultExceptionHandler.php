<?php
namespace LmMvc;

use LmMvc\Exception\PageNotFoundException;
use LmMvc\Utility\HeaderWrapper;

/**
 * Class DefaultExceptionHandler
 *
 * The default exception handler.
 *
 * @package LmMvc
 */
class DefaultExceptionHandler implements ExceptionHandler
{
    /**
     * The Header Wrapper instance.
     * @var HeaderWrapper
     */
    private $headerWrapper;

    /**
     * Initializes the Default Exception Handler.
     */
    public function __construct()
    {
        $this->headerWrapper = null;
    }

    /**
     * Sets an instance of a Header Wrapper (for testing purposes).
     *
     * @param HeaderWrapper $headerWrapper
     */
    public function setHeaderWrapper($headerWrapper)
    {
        $this->headerWrapper = $headerWrapper;
    }

    /**
     * Returns the Header Wrapper instance.
     *
     * @return \LmMvc\Utility\HeaderWrapper
     */
    public function getHeaderWrapper()
    {
        if (is_null($this->headerWrapper))
        {
            $this->headerWrapper = new HeaderWrapper();
        }

        return $this->headerWrapper;
    }

    /**
     * Handles any thrown exceptions (such as those generated by LMMVC or by the application itself).
     *
     * @param \Exception $ex
     * @param bool $internal
     */
    public function handle(\Exception $ex, $internal = true)
    {
        // If it's a page not found, we have something slightly different to show...
        if ($ex instanceof PageNotFoundException)
        {
            $this->showPageNotFoundMessage($ex);
            return;
        }

        // Otherwise show an external message.
        $this->showGenericExceptionMessage($ex);
    }

    /**
     * Shows a page not found message.
     *
     * @param \Exception $ex
     */
    public function showPageNotFoundMessage(\Exception $ex)
    {
        // We just need the exception message.
        $exceptionMessage = $ex->getMessage();

        // Get our header wrapper.
        $headerWrapper = $this->getHeaderWrapper();

        // Set our header status and label.
        $headerWrapper->setStatusCode(404, 'Page Not Found');
        $headerWrapper->send();

        echo <<<DOC
<!DOCTYPE html>
<html>
<head>
    <title>404 - Page Not Found</title>
</head>
<body>
    <h1>The Requested Page Was Not Found</h1>
    <p>The requested page could not be found. Please go back and try again.</p>
    <p><strong>Error Message:</strong> $exceptionMessage</p>
</body>
</html>
DOC;

    }

    /**
     * Shows a page for every other exception.
     *
     * @param \Exception $ex
     */
    public function showGenericExceptionMessage(\Exception $ex)
    {
        // Get the exception class name and message.
        $exceptionClassName = get_class($ex);
        $exceptionMessage = $ex->getMessage();

        // Get our header wrapper.
        $headerWrapper = $this->getHeaderWrapper();

        // Set our header status and label.
        $headerWrapper->setStatusCode(500, 'Internal Server Error');
        $headerWrapper->send();

        echo <<<DOC
<!DOCTYPE html>
<html>
<head>
    <title>500 - Internal Server Error</title>
</head>
<body>
    <h1>Internal Server Error</h1>
    <p>A fatal error occurred while processing your request. Please try again later.</p>
    <p><strong>Error Message:</strong> [$exceptionClassName] $exceptionMessage</p>
</body>
</html>
DOC;
    }
} 